
Currently we are having a slight issue where sometimes sW.Defaults is not loading.
I think it is transient and due to the local file testing we have at present, but need to keep an eye on it.
It happens a lot after multiple page refreshes - not sure why the define from Defaults is not setting it loaded before it loads utils
It looks like if class require utils it can sometimes cause the same issues.


Change how classes work to use prototyping under the hood
Pass in an object with values/functions that are then assigned as prototypes.
Anything you inherit will have wrapper functions created that apply that function (with arguments) - and you can overwrite and reference back with Parent.prototype.call(this, **args);


What if we make Classes as lightweight as possible, and create a binding library specifically?
Watching takes an object, variable and callback - and sets it up with getter/setter manually as needed.
Binding sets one objects setter to be fired on another one being used, and vice versa (only on value change, to prevent recursion)

Question: do we really want a function to be modifying the behaviour of an object instance ever?
          How can we handle objects that already have getters and setters set?

When including a module, take an extra param (namespace) which stores the definitions from a script inside that namespace in _loaded_modules, instead of directly in _loaded_modules

I am trying to get the modules to be more robust about requiring.
I am thinking a require method, that is basically include but checks if it is there and fails silently if it is.
Require takes the filename of the file (like include), and the requirements for the declare are names still.
Need to be able to use relative paths. Can we store the namespace and the path in the attributes for a script, then do a call like:
    sW.Module.require(sW.Module.relativePath('sW.Utils', 'defaults.js'));
    //which resolves to the path for defaults.js script

Or we just make the required part of declare take scripts instead of names (can't do that since scripts have no clue about their contents or what order they need to load).
Scripts will be loaded async so need to know what modules they declare and wait for those.

Using require(script) and declare(...[module, names], ...) allows us to declare needed scripts to fulfil the requirements for the declaration.
We could do declare(..., {module_name: script_path...}, ...) which might be better - this also allows us to piggy back these onto the declared namespaces instead of the default one
So when you include a module have a namespace with it that goes in and trickles down if you will




-----------------

Handlers are attributes (either with a value or without) that are defined as Handlers in the app.
sW.attachHandlers will find all of them and attach them to the elements they are found on

There are a few predefined handlers:
master (= value - string delimited for multiple)
    master(s) are available to all elements inside the element set with it by name (for binding)
    they are not given direct access to the dom, but are meant to expose values/functions to elements
    Masters should be sW.Class objects that expose values for binding

    Attributes that reference {master....} should place a watch on master/value and also set a function onchange to update it


<body master='main-page'>
    <h1 